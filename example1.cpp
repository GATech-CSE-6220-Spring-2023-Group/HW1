/*************************************************************
 * Author : Harshit, Karl, Dalton
 * Class: CSE6220, CSE4220
 * Last Modified : Feb 4th 2023
 * 
 * Description : 
 * 
 * C++ MPI program to find the Integral of (4/ (1 + x^2)) 
 * Problem Size = 1000000
 * Answer of the problem should be ~Pi 
 * 
**************************************************************/

#include <iostream>
#include <mpi.h>
#include <iomanip>

int main(int argc, char** argv) 
{

  MPI_Init(NULL, NULL);
  // stores the number of processor and processor rank respectively 
  int mpiSize, mpiRank;
  MPI_Comm_size(MPI_COMM_WORLD, &mpiSize);
  MPI_Comm_rank(MPI_COMM_WORLD, &mpiRank);

  //Problem size 
  int N;
  // variable to measure the start time using MPI_Wtime
  double start_time;

  // block executed only by processor having rank 0
  if (mpiRank == 0) {
    // Initialize the value of N
    N = 1000000; 
    // Measure the start time 
    start_time = MPI_Wtime();

  }
  // master process broadcasts the value of N to all the other processors 

  MPI_Bcast( &N, 1, MPI_INT, 0, MPI_COMM_WORLD);

  double localSum = 0;
  int chunk_size = N / mpiSize;
  // calcultes the local sum on the each processor 
  for (int i = mpiRank * chunk_size; i < (mpiRank + 1) * chunk_size; ++i) {
    double K = (1.0/N)*(i-0.5);
    localSum += ( 1.0/N )* ( 4.0/ (1.0 + (K*K)));
  }
  // store the final sum 
  double globalSum;

  // Processor with rank 0 performs the summing operation on the localSum values generated by each processors 
  MPI_Reduce(&localSum, &globalSum, 1, MPI_DOUBLE , MPI_SUM, 0, MPI_COMM_WORLD);

  // block executed only by processor having rank 0
  if (mpiRank == 0) {
    // measure the end time 
    double end_time = MPI_Wtime();

    std::cout << "The sum of the array is: " << std::setprecision(12)<< globalSum << std::endl;
    std::cout << "Elapsed time: " << end_time - start_time << " seconds" << std::endl;
  }

  MPI_Finalize();

  return 0;
}

